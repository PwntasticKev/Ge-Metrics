#!/usr/bin/env node

const http = require('http')

function testDataFix () {
  console.log('üß™ Testing data loading fix...')

  const options = {
    hostname: 'localhost',
    port: 8000,
    path: '/',
    method: 'GET'
  }

  const req = http.request(options, (res) => {
    console.log('üì± Status:', res.statusCode)

    let data = ''
    res.on('data', (chunk) => {
      data += chunk
    })

    res.on('end', () => {
      console.log('üìÑ Length:', data.length)

      // Check for various issues
      const hasReactError = data.includes('Error:') && data.includes('React')
      const hasConsoleError = data.includes('console.error') || data.includes('Error:')
      const hasControlledInputWarning = data.includes('controlled input to be uncontrolled')
      const hasQueryClientError = data.includes('No QueryClient set')
      const hasAppContent = data.includes('Ge Metrics') || data.includes('vite') || data.includes('react')
      const hasScripts = data.includes('<script') && data.includes('main.jsx')
      const hasDataLoadingIndicators = data.includes('loading') || data.includes('Loading') || data.includes('items') || data.includes('data')
      const hasFetchingLogs = data.includes('Fetching') || data.includes('üîÑ')

      console.log('\nüìä Data Loading Fix Test Results:')
      console.log('‚úÖ Status 200:', res.statusCode === 200)
      console.log('‚úÖ No React errors:', !hasReactError)
      console.log('‚úÖ No console errors:', !hasConsoleError)
      console.log('‚úÖ No controlled input warnings:', !hasControlledInputWarning)
      console.log('‚úÖ No QueryClient errors:', !hasQueryClientError)
      console.log('‚úÖ Has app content:', hasAppContent)
      console.log('‚úÖ Has scripts loaded:', hasScripts)
      console.log('‚úÖ Has data loading indicators:', hasDataLoadingIndicators)
      console.log('‚úÖ Has fetching logs:', hasFetchingLogs)

      if (hasReactError) {
        console.log('\n‚ö†Ô∏è  React errors found:')
        console.log('   - Check browser console for details')
      }

      if (hasConsoleError) {
        console.log('\n‚ö†Ô∏è  Console errors found:')
        console.log('   - Check browser console for details')
      }

      if (hasControlledInputWarning) {
        console.log('\n‚ö†Ô∏è  Controlled input warnings found:')
        console.log('   - This indicates inputs switching from controlled to uncontrolled')
      }

      if (hasQueryClientError) {
        console.log('\n‚ö†Ô∏è  QueryClient errors found:')
        console.log('   - This indicates React Query setup issues')
      }

      if (!hasAppContent) {
        console.log('\n‚ö†Ô∏è  No app content found:')
        console.log('   - This might indicate the app is not loading properly')
      }

      if (!hasScripts) {
        console.log('\n‚ö†Ô∏è  No scripts found:')
        console.log('   - This might indicate the app is not loading properly')
      }

      if (!hasDataLoadingIndicators) {
        console.log('\n‚ö†Ô∏è  No data loading indicators found:')
        console.log('   - This might indicate data is not loading or processing correctly')
      }

      if (!hasFetchingLogs) {
        console.log('\n‚ö†Ô∏è  No fetching logs found:')
        console.log('   - This might indicate the API calls are not being made')
      }

      const allPassed = !hasReactError && !hasConsoleError && !hasControlledInputWarning &&
                       !hasQueryClientError && hasAppContent && hasScripts && hasDataLoadingIndicators && hasFetchingLogs

      if (allPassed) {
        console.log('\nüéâ SUCCESS! Data loading fix appears to be working')
        console.log('‚úÖ No React errors detected')
        console.log('‚úÖ No controlled input warnings')
        console.log('‚úÖ No QueryClient errors')
        console.log('‚úÖ App content is loading')
        console.log('‚úÖ Scripts are properly loaded')
        console.log('‚úÖ Data loading indicators are present')
        console.log('‚úÖ Fetching logs are present')
        console.log('‚úÖ Application should be fully functional')
        process.exit(0)
      } else {
        console.log('\n‚ùå FAILED! Check the issues above')
        process.exit(1)
      }
    })
  })

  req.on('error', (error) => {
    console.error('‚ùå Error:', error.message)
    process.exit(1)
  })

  req.end()
}

testDataFix()
