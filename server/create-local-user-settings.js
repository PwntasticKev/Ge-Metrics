#!/usr/bin/env node

/**
 * CREATE LOCAL USER_SETTINGS TABLE AND ADMIN USER
 * Creates the user_settings table locally and sets user ID 1 as admin
 */

import { Client } from 'pg'
import dotenv from 'dotenv'

dotenv.config()

console.log('🔧 Setting up local user_settings table and admin user...')

async function createLocalUserSettings() {
  const databaseUrl = process.env.CORRECT_DATABASE_URL || process.env.DATABASE_URL
  
  const client = new Client({
    connectionString: databaseUrl,
    ssl: databaseUrl.includes('neon.tech') ? { rejectUnauthorized: false } : false
  })

  try {
    await client.connect()
    console.log('✅ Connected to local database')

    // Check if user_settings table exists
    const tableExists = await client.query(`
      SELECT EXISTS (
        SELECT FROM information_schema.tables 
        WHERE table_name = 'user_settings'
      )
    `)

    if (!tableExists.rows[0].exists) {
      console.log('📋 Creating user_settings table...')
      
      // Create the user_settings table
      await client.query(`
        CREATE TABLE user_settings (
          id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
          user_id integer NOT NULL UNIQUE REFERENCES users(id) ON DELETE CASCADE,
          mailchimp_api_key text,
          email_notifications boolean DEFAULT true NOT NULL,
          volume_alerts boolean DEFAULT true NOT NULL,
          price_drop_alerts boolean DEFAULT true NOT NULL,
          cooldown_period integer DEFAULT 5,
          otp_enabled boolean DEFAULT false NOT NULL,
          otp_secret text,
          otp_verified boolean DEFAULT false NOT NULL,
          role text DEFAULT 'user' NOT NULL,
          permissions jsonb,
          created_at timestamp without time zone DEFAULT now() NOT NULL,
          updated_at timestamp without time zone DEFAULT now() NOT NULL
        )
      `)
      
      // Create indexes
      await client.query(`
        CREATE INDEX user_settings_user_id_idx ON user_settings(user_id)
      `)
      
      console.log('✅ user_settings table created successfully')
    } else {
      console.log('✅ user_settings table already exists')
    }

    // Check if user ID 1 exists
    const user1 = await client.query(`
      SELECT id, email, name FROM users WHERE id = 1
    `)

    if (user1.rows.length === 0) {
      console.log('❌ User ID 1 does not exist in users table')
      console.log('📋 Available users:')
      const allUsers = await client.query(`SELECT id, email, name FROM users ORDER BY id`)
      allUsers.rows.forEach(user => {
        console.log(`   ID ${user.id}: ${user.email} (${user.name})`)
      })
      console.log('⚠️  You can manually change the admin user ID later')
    } else {
      console.log(`✅ User ID 1 exists: ${user1.rows[0].email} (${user1.rows[0].name})`)
    }

    // Create/update admin settings for user ID 1
    console.log('👑 Setting user ID 1 as admin...')
    
    const adminSettings = await client.query(`
      INSERT INTO user_settings (
        user_id, 
        role, 
        email_notifications, 
        volume_alerts, 
        price_drop_alerts, 
        cooldown_period, 
        otp_enabled, 
        otp_verified,
        permissions
      ) VALUES (
        $1, $2, $3, $4, $5, $6, $7, $8, $9
      ) ON CONFLICT (user_id) DO UPDATE SET
        role = $2,
        permissions = $9,
        updated_at = NOW()
      RETURNING *
    `, [
      1, // user_id
      'admin', // role
      true, // email_notifications
      true, // volume_alerts
      true, // price_drop_alerts
      5, // cooldown_period
      false, // otp_enabled
      false, // otp_verified
      JSON.stringify({
        admin: ['full_access'],
        users: ['read', 'write', 'delete'],
        billing: ['read', 'write'],
        system: ['read', 'write'],
        security: ['read', 'write']
      })
    ])

    console.log('✅ Admin settings created/updated:')
    console.log(`   User ID: ${adminSettings.rows[0].user_id}`)
    console.log(`   Role: ${adminSettings.rows[0].role}`)
    console.log(`   Permissions:`, adminSettings.rows[0].permissions)

    // Final verification
    console.log('\n🔍 Verifying admin setup...')
    const verification = await client.query(`
      SELECT 
        u.id, 
        u.email, 
        u.name, 
        us.role, 
        us.permissions
      FROM users u
      LEFT JOIN user_settings us ON u.id = us.user_id
      WHERE u.id = 1
    `)

    if (verification.rows.length > 0) {
      const admin = verification.rows[0]
      console.log('🎉 Admin setup verified:')
      console.log(`   ID: ${admin.id}`)
      console.log(`   Email: ${admin.email}`)
      console.log(`   Name: ${admin.name}`)
      console.log(`   Role: ${admin.role}`)
    } else {
      console.log('❌ Admin verification failed - user ID 1 not found')
    }

    console.log('\n✅ Local user_settings setup completed!')
    console.log('🔄 Restart your dev server and try logging in to see admin menu')

  } catch (error) {
    console.error('❌ Setup failed:', error)
    throw error
  } finally {
    await client.end()
  }
}

createLocalUserSettings()
  .then(() => {
    console.log('\n🚀 Local setup completed successfully!')
    process.exit(0)
  })
  .catch((error) => {
    console.error('\n💥 Setup failed:', error.message)
    process.exit(1)
  })